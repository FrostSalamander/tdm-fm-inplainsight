// DMX map script

/////////////
// GLOBALS
/////////////

// state of the lights in TSS office/warehouse.  1 is on, 0 is off
float tss_lights_on = 1;

// state of crypt exit door
float crypt_exit_triggered = 0;

// Gerald/Holly objective states
float gerald_journal_read = 0;
float holly_letter_read = 0;

// Bank vault safe states
float safe1_opened = 0;
float safe2_opened = 0;

// crypt monster spawn state
float crypt_monster_spawned = 0;

// Objectives
float OBJ_COLLEAGUE = 1;
float OBJ_PLOT = 2;
float OBJ_BANK = 3;
float OBJ_TSS = 4;
float OBJ_EATON = 5;
float OBJ_EVIDENCE_PEMBROKE = 7;
float OBJ_EVIDENCE_BANCROFT = 8;
float OBJ_EVIDENCE_TROUTBECK = 9;
float OBJ_EVIDENCE_NELSON = 10;
float OBJ_EXIT = 11;
float OBJ_CUPID = 13;

// Angles
vector ANGLE_EAST = '90 0 0';

// Entities
string CITY_MAP = "city_map";       // map entity on the wall
string MAP_OF   = "atdm_map_of_1";  // in-game map entity

string GATEHOUSE_LEVER = "lever1";

string PLAYER = "player1";
string CRYPT_MONSTER = "crypt_monster";
string NELSON = "new_nelson";
string MRS_PEMBROKE = "new_mrs_pembroke";
string TROUTBECK = "new_troutbeck";
string BANCROFT = "new_bancroft";

string CRYPT_GATE = "crypt_gate";
string CRYPT_MONSTER_GATE = "crypt_monster_gate";
string CRYPT_AI_EXIT_DOOR = "crypt_ai_exit";

////////////////
// END GLOBALS
////////////////

boolean isObjectiveComplete(float objectiveId)
{
    return ($player1.getObjectiveState(objectiveId) == 1);
}

// using this plus a trigger as was experiencing inconsistent behaviour 
// with the traditional exit method: https://bugs.thedarkmod.com/view.php?id=5404
void completeMission()
{
    if (isObjectiveComplete(OBJ_COLLEAGUE) &&
        isObjectiveComplete(OBJ_PLOT) &&
        isObjectiveComplete(OBJ_BANK) &&
        isObjectiveComplete(OBJ_TSS) &&
        isObjectiveComplete(OBJ_BANK) &&
        isObjectiveComplete(OBJ_EVIDENCE_PEMBROKE) &&
        isObjectiveComplete(OBJ_EVIDENCE_BANCROFT) &&
        isObjectiveComplete(OBJ_EVIDENCE_TROUTBECK) &&
        isObjectiveComplete(OBJ_EVIDENCE_NELSON))
    {
        $player1.setObjectiveState(OBJ_EXIT, 1);
    }
}

void setGatehouseLeverFrobable(entity zone)
{
    sys.getEntity(GATEHOUSE_LEVER).setFrobable(1);
}

void setGatehouseLeverNotFrobable(entity zone)
{
    sys.getEntity(GATEHOUSE_LEVER).setFrobable(0);
}

void getMap()
{   
    entity map = sys.getEntity(CITY_MAP);

    map.startSound("snd_acquire", SND_CHANNEL_UNUSED, false);
    map.remove();

    player player_self = sys.getEntity(PLAYER);
    player_self.addInvItem(sys.getEntity(MAP_OF));
    player_self.setCurInvItem("Map");
}

void setJohanShutterFrobable(float frobable)
{
    $johan_shutter1.setFrobable(frobable);
    $johan_shutter2.setFrobable(frobable);
    $johan_shutter3.setFrobable(frobable);
    $johan_shutter4.setFrobable(frobable);
}

void setJohanShutterFrobableOn(entity zone)
{
    setJohanShutterFrobable(1);
}

void setJohanShutterFrobableOff(entity zone)
{
    setJohanShutterFrobable(0);
}

void setFinalObjectives()
{
    // set the 'evidence' objectives
    $player1.setObjectiveVisible(OBJ_EVIDENCE_PEMBROKE, 1);
    $player1.setObjectiveVisible(OBJ_EVIDENCE_BANCROFT, 1);
    $player1.setObjectiveVisible(OBJ_EVIDENCE_TROUTBECK, 1);
    $player1.setObjectiveVisible(OBJ_EVIDENCE_NELSON, 1);

    // complete the plot objective
    $player1.setObjectiveState(OBJ_PLOT, 1);
}

void spawnAI(string origin, string target, string name, string class, vector angle, string team, boolean mute)
{
    sys.setSpawnArg("origin", origin);

    if (mute)
    {
      sys.setSpawnArg("def_vocal_set", "atdm:ai_vocal_set_mute");
    }

    // target their path_corner
    sys.setSpawnArg("target0", target);

    sys.setSpawnArg("team", team);
    sys.setSpawnArg("name", name);

    entity spawnedAI = sys.spawn(class);

    // face desired angle
    spawnedAI.setAngles(angle);
}

// Triggered when last AI clears the chamber
void activateCryptMonster()
{
    // close and lock the door the AI just walked out of
    entity exitDoor = sys.getEntity(CRYPT_AI_EXIT_DOOR);
    exitDoor.Close();
    exitDoor.Lock();

    // spawn the crypt monster
    spawnAI("-1259.62 -503.401 -295.708", "path_corner_139", CRYPT_MONSTER, "atdm:ai_undead_revenant", ANGLE_EAST, "2", false);

    // wait a bit for the monster to reach his path_waitfortrigger
    sys.wait(2);

    // trigger the monster to start patrolling
    sys.trigger(sys.getEntity(CRYPT_MONSTER));
}

void triggerWalkout(entity ent_target, entity triggerEntity, entity ent_callscriptfunction)
{
    string name = triggerEntity.getName();

    if (name == NELSON)
    {
        sys.trigger(sys.getEntity(MRS_PEMBROKE));
        triggerEntity.remove();
    }
    else if (name == MRS_PEMBROKE)
    {
        sys.trigger(sys.getEntity(TROUTBECK));
        triggerEntity.remove();
    }
    else if (name == TROUTBECK)
    {
        sys.trigger(sys.getEntity(BANCROFT));
        triggerEntity.remove();
    }
    else if (name == BANCROFT)
    {
        triggerEntity.remove();

        if (!crypt_monster_spawned)
        {
            crypt_monster_spawned = 1;
            activateCryptMonster();
        }
    }
}

void respawnAI()
{
    // Game characters are removed and re-spawned in case they were KO'd

    // replace Nelson
    $ai_postman_start.remove();
    spawnAI("-1496 -672 -295.853", "path_corner_136", NELSON, "atdm:ai_nelson", ANGLE_EAST, "5", true);

    // replace Mrs Pembroke
    $old_mrs_pembroke.remove();
    spawnAI("-1496 -584 -295.853", "path_corner_138", MRS_PEMBROKE, "atdm:ai_mrs_pembroke", ANGLE_EAST, "5", true);

    // replace Troutbeck
    $old_troutbeck.remove();
    spawnAI("-1408 -744 -295.986", "path_corner_141", TROUTBECK, "atdm:ai_troutbeck", ANGLE_EAST, "5", true);

    // replace Bancroft
    $old_bancroft.remove();
    spawnAI("-1432 -544 -295.853", "path_corner_142", BANCROFT, "atdm:ai_bancroft", ANGLE_EAST, "5", true);
}

void endSequence()
{
    // close the gate in front of the player
    sys.getEntity(CRYPT_GATE).Close();

    setFinalObjectives();
    
    // let it sink in.
    sys.wait(5);

    // trigger Nelson
    sys.trigger(sys.getEntity(NELSON));
}

float getTSSCameraState() 
{
    return $tss_camera.getSecurityCameraState();
}

float isPowerEnabled()
{
    return $tss_transformer.isFrobable();
}

boolean isTSSCameraDisabled()
{
    return getTSSCameraState() == 4;
}

boolean isTSSLightsOn()
{
    return tss_lights_on == 1;
}

void triggerTSSLights()
{
    // Light inside TSS and outdoors on south side
    sys.trigger($tss_light1);
    sys.trigger($tss_light2);
    sys.trigger($tss_light3);
    sys.trigger($tss_outdoor_light1);
    sys.trigger($tss_outdoor_light2);

    if (isTSSLightsOn())
    {
        tss_lights_on = 0;
    }
    else
    {
        tss_lights_on = 1;
    }
}

void toggleTSSLights()
{
    if (isPowerEnabled())
    {
        triggerTSSLights();
    }
}

void disableTSSCamera()
{
    if (!isTSSCameraDisabled())
    {
        sys.trigger($tss_camera);
    }
}

void frobArcTransformer(entity arc)
{
    arc.setSkin("arc_transformer_001_off");
    arc.setFrobable(0);
    arc.startSound("snd_stop", SND_CHANNEL_UNUSED, false);

    // stop the transformer buzzing sound
    sys.trigger($transformer_speaker);

    disableTSSCamera();

    // Turn off all the outdoor lights on TSS north side
    sys.trigger($atdm_lamp_electric_grill__short_lit_13);
    sys.trigger($atdm_lamp_electric_outdoor_down_rusty_lit_1);
    sys.trigger($atdm_lamp_electric_square_1_lit_2);
    sys.trigger($atdm_lamp_electric_outdoor_down_rusty_lit_3);
    sys.trigger($atdm_lamp_electric_shaded_lit_4);
    sys.trigger($atdm_lamp_electric_shaded_lit_2);

    // The TSS lights are also controlled by a switch, don't trigger them if they are already off
    if (isTSSLightsOn())
    {
        triggerTSSLights();
    }
}

void enableTSSCamera()
{
    if (isTSSCameraDisabled() && isPowerEnabled())
    {
        sys.trigger($tss_camera);
    }
}

void removeSafeBar(entity safeBar)
{
    entity safeDoor = safeBar.getBindMaster();
    safeBar.startSound("snd_acid", SND_CHANNEL_UNUSED, false);
    sys.wait(4);
    safeBar.remove();

    safeDoor.setFrobable(1);
}

// 'use' the safe bar.  Run in new thread so sys.wait() will work
void useSafeBar(entity safeBar)
{
    thread removeSafeBar(safeBar);
}

void frobSafeBar(entity safeBar)
{
    safeBar.startSound("snd_frob", SND_CHANNEL_UNUSED, false);
}

void swish()
{
    sys.trigger($speaker_swish);
}

// used with a trigger_facing. If facing the statue and crouched, trigger the exit door.
// track state because we can't use a trigger once
void trigger_crypt_exit()
{
    player player_self = $player1;
    if (player_self.AI_CROUCH && !crypt_exit_triggered)
    {
        // open the secret door
        sys.trigger($crypt_secret_exit_door);
        crypt_exit_triggered = 1;
    }
}

// If the Gerald/Holly objective isn't yet visible and you've
// read both their readables, make the objective visible
void geraldHollyObjective(entity ent_target, entity readable, entity ent_callscriptfunction)
{
    if (!$player1.getObjectiveVisible(OBJ_CUPID))
    {
        string readableName = readable.getName();
        if (readableName == "holly_letter")
        {
            holly_letter_read = 1;
        }
        else if (readableName == "gerald_journal")
        {
            gerald_journal_read = 1;
        }

        if (holly_letter_read && gerald_journal_read)
        {
            $player1.setObjectiveVisible(OBJ_CUPID, 1);
        }
    }
}

// main - keep at bottom
void main()
{
    sys.waitFrame();
}
