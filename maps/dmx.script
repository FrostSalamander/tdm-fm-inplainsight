// DMX map script

/////////////
// GLOBALS
/////////////

// state of the lights in TSS office/warehouse.  1 is on, 0 is off
float tss_lights_on = 1;

// state of crypt exit door
float crypt_exit_triggered = 0;

// Gerald/Holly objective states
float gerald_journal_read = 0;
float holly_letter_read = 0;

// Bank vault safe states
float safe1_opened = 0;
float safe2_opened = 0;

// Objectives
float OBJ_BREAK_INTO_VAULT = 4;
float OBJ_PLOT = 5;
float OBJ_END_MISSION = 7;
float OBJ_CUPID = 8;
float OBJ_GET_TO_MEETING_PLACE = 12;

// Angles
vector ANGLE_EAST = '90 0 0';

// Entities
string CRYPT_MONSTER = "crypt_monster";
string NELSON = "new_nelson";
string MRS_PEMBROKE = "new_mrs_pembroke";
string TROUTBECK = "new_troutbeck";
string BANCROFT = "new_bancroft";

string CRYPT_DUMMY_TARGET = "func_static_2997";
string CSF_CRYPT_MONSTER = "activate_crypt_monster";

////////////////
// END GLOBALS
////////////////

void setJohanShutterFrobable(float frobable)
{
    $johan_shutter1.setFrobable(frobable);
    $johan_shutter2.setFrobable(frobable);
    $johan_shutter3.setFrobable(frobable);
    $johan_shutter4.setFrobable(frobable);
}

void setJohanShutterFrobableOn(entity zone)
{
    setJohanShutterFrobable(1);
}

void setJohanShutterFrobableOff(entity zone)
{
    setJohanShutterFrobable(0);
}

void spawnAI(string origin, string target, string name, string class, vector angle, string team)
{
    sys.setSpawnArg("origin", origin);

    // target their path_corner
    sys.setSpawnArg("target0", target);

    sys.setSpawnArg("team", team);

    sys.setSpawnArg("name", name);
    entity spawnedAI = sys.spawn(class);

    // face desired angle
    spawnedAI.setAngles(angle);
}

void changeTarget(entity triggerEntity, entity oldTarget, entity newTarget)
{
    triggerEntity.removeTarget(oldTarget);
    triggerEntity.addTarget(newTarget);
}

// Triggered when last AI (Troutbeck) clears the chamber
void activateCryptMonster()
{
    // Let the AI clear the doorway first
    sys.wait(3);

    // close and lock the door the AI just walked out of
    $crypt_ai_exit.Close();
    $crypt_ai_exit.Lock();

    // spawn the crypt monster
    spawnAI("-1259.62 -503.401 -295.708", "path_corner_139", CRYPT_MONSTER, "atdm:ai_undead_revenant", ANGLE_EAST, "2");

    // wait a bit for the monster to reach his path_waitfortrigger
    sys.wait(2);

    // open the gate
    sys.trigger($crypt_monster_gate);

    // trigger the monster to start patrolling
    sys.trigger($crypt_monster);

    // Let the player stew for a while
    sys.wait(8);

    // open the gate blocking the player
    sys.trigger($crypt_gate);
}

void endSequence()
{
    // Game characters are removed and re-spawned in case they were KO'd

    // replace Nelson
    $ai_postman_start.remove();
    spawnAI("-1496 -672 -295.853", "path_corner_136", NELSON, "atdm:ai_nelson", ANGLE_EAST, "5");

    // replace Mrs Pembroke
    $old_mrs_pembroke.remove();
    spawnAI("-1496 -584 -295.853", "path_corner_138", MRS_PEMBROKE, "atdm:ai_mrs_pembroke", ANGLE_EAST, "5");

    // replace Troutbeck
    $old_troutbeck.remove();
    spawnAI("-1408 -744 -295.986", "path_corner_141", TROUTBECK, "atdm:ai_troutbeck", ANGLE_EAST, "5");

    // replace Bancroft
    $old_bancroft.remove();
    spawnAI("-1432 -544 -295.853", "path_corner_142", BANCROFT, "atdm:ai_bancroft", ANGLE_EAST, "5");

    // These triggers had a dummy target because their real targets didn't exist until now
    changeTarget($nelson_trigger, sys.getEntity(CRYPT_DUMMY_TARGET), sys.getEntity(MRS_PEMBROKE));
    changeTarget($pembroke_trigger, sys.getEntity(CRYPT_DUMMY_TARGET), sys.getEntity(BANCROFT));
    changeTarget($bancroft_trigger, sys.getEntity(CRYPT_DUMMY_TARGET), sys.getEntity(TROUTBECK));
    
    // close the gate in front of the player
    sys.trigger($crypt_gate);

    // let it sink in.
    sys.wait(5);

    // trigger Nelson
    sys.trigger(sys.getEntity(NELSON));
}

void removeAI(entity ent_target, entity triggerEntity, entity ent_callscriptfunction)
{
    sys.println("triggered.");
    triggerEntity.remove();
}

void checkVaultObjective(entity ent_target, entity door, entity ent_callscriptfunction)
{
    if ($player1.getObjectiveVisible(OBJ_BREAK_INTO_VAULT))
    {
        string doorName = door.getName();
        if (doorName == "bank_safedoor_1")
        {
            safe1_opened = 1;
        }
        else if (doorName == "bank_safedoor_2")
        {
            safe2_opened = 1;
        }

        if (safe1_opened && safe2_opened)
        {
            $player1.setObjectiveState(OBJ_BREAK_INTO_VAULT, 1);
        }
    }
}

float getTSSCameraState() 
{
    return $tss_camera.getSecurityCameraState();
}

float isPowerEnabled()
{
    return $tss_transformer.isFrobable();
}

boolean isTSSCameraDisabled()
{
    return getTSSCameraState() == 4;
}

boolean isTSSLightsOn()
{
    return tss_lights_on == 1;
}

void triggerTSSLights()
{
    sys.trigger($tss_light1);
    sys.trigger($tss_light2);
    sys.trigger($tss_light3);
    sys.trigger($tss_outdoor_light1);
    sys.trigger($tss_outdoor_light2);

    if (isTSSLightsOn())
    {
        tss_lights_on = 0;
    }
    else
    {
        tss_lights_on = 1;
    }
}

void toggleTSSLights()
{
    if (isPowerEnabled())
    {
        triggerTSSLights();
    }
}

void disableTSSCamera()
{
    if (!isTSSCameraDisabled())
    {
        sys.trigger($tss_camera);
    }
}

void frobArcTransformer(entity arc)
{
    arc.setSkin("arc_transformer_001_off");
    arc.setFrobable(0);
    arc.startSound("snd_stop", SND_CHANNEL_UNUSED, false);

    // stop the transformer buzzing sound
    sys.trigger($transformer_speaker);

    disableTSSCamera();

    // don't trigger the lights if they are already off
    if (isTSSLightsOn())
    {
        triggerTSSLights();
    }
}

void enableTSSCamera()
{
    if (isTSSCameraDisabled() && isPowerEnabled())
    {
        sys.trigger($tss_camera);
    }
}

void move_postman()
{

    // objective to get to the meeting place becomes visible
    $player1.setObjectiveVisible(OBJ_GET_TO_MEETING_PLACE, 1);

    // remove the initial AI who was in the Inn
    $ai_postman_start.remove();

    // place him in the crypt
    sys.setSpawnArg("origin", "-935.679 -535.221 -295.853");

    // set up an 'ai_trigger_look' to trigger objective when the player looks at him
    sys.setSpawnArg("scriptobject", "ai_trigger_look");
    sys.setSpawnArg("tol_distance", "200");

    // tol_angle should be 0.1, but doesn't work: https://wiki.thedarkmod.com/index.php?title=Triggering_events_when_looking_at_something#Remarks
    sys.setSpawnArg("tol_angle", "2"); 
    sys.setSpawnArg("once", "1");
    sys.setSpawnArg("target0", "target_change_meeting_place_objectives");

    sys.setSpawnArg("name", "ai_postman");
    entity newPostman = sys.spawn("atdm:postman");

    // make him face south
    newPostman.setAngles('0 -90 0');

    // we don't want the player to discover the secret exit before now
    $crypt_torch_lever.setFrobable(1);
}

void completeMeetingPlaceObjective()
{
    if ($player1.getObjectiveVisible(OBJ_GET_TO_MEETING_PLACE))
    {
            $player1.setObjectiveState(OBJ_GET_TO_MEETING_PLACE, 1);
    }
}

void change_meeting_place_objectives()
{
    // objective to capture the perpetrator becomes visible
    $player1.setObjectiveVisible(OBJ_END_MISSION, 1);

    // wait a bit so these both don't happen at once
    sys.wait(3);

    // complete objective to find out who is behind the plot
    $player1.setObjectiveState(OBJ_PLOT, 1);
}

void removeSafeBar(entity safeBar)
{
    entity safeDoor = safeBar.getBindMaster();
    safeBar.startSound("snd_acid", SND_CHANNEL_UNUSED, false);
    sys.wait(4);
    safeBar.remove();

    safeDoor.setFrobable(1);
}

// 'use' the safe bar.  Run in new thread so sys.wait() will work
void useSafeBar(entity safeBar)
{
    thread removeSafeBar(safeBar);
}

void frobSafeBar(entity safeBar)
{
    safeBar.startSound("snd_frob", SND_CHANNEL_UNUSED, false);
}

void swish()
{
    sys.trigger($speaker_swish);
}

boolean isPostmanShouldered()
{
    entity body = $player1.getShouldered();
    string name = body.getName();

    return (name == "ai_postman");
}

void complete_mission()
{
    if ($player1.getObjectiveVisible(OBJ_END_MISSION) && isPostmanShouldered())
    {
        $player1.setObjectiveState(OBJ_END_MISSION, OBJ_COMPLETE);
    }
}

// used with a trigger_facing. If facing the statue and crouched, trigger the exit door.
// track state because we can't use a trigger once
void trigger_crypt_exit()
{
    player player_self = $player1;
    if (player_self.AI_CROUCH && !crypt_exit_triggered)
    {
        // open the secret door
        sys.trigger($crypt_secret_exit_door);

        // func_aas_obstacle used to prevent fleeing AI from using the secret door: https://bugs.thedarkmod.com/view.php?id=6005
        sys.trigger($crypt_obstacle);
        crypt_exit_triggered = 1;
    }
}

// If the Gerald/Holly objective isn't yet visible and you've
// read both their readables, make the objective visible
void geraldHollyObjective(entity ent_target, entity readable, entity ent_callscriptfunction)
{
    if (!$player1.getObjectiveVisible(OBJ_CUPID))
    {
        string readableName = readable.getName();
        if (readableName == "holly_letter")
        {
            holly_letter_read = 1;
        }
        else if (readableName == "gerald_journal")
        {
            gerald_journal_read = 1;
        }

        if (holly_letter_read && gerald_journal_read)
        {
            $player1.setObjectiveVisible(OBJ_CUPID, 1);
        }
    }
}

// main - keep at bottom
void main()
{
    sys.waitFrame();
}









