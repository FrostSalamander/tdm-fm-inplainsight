// DMX map script

// state of the lights in TSS office/warehouse.  1 is on, 0 is off
float tss_lights_on = 1;

float triggered = 0;

float getTSSCameraState() 
{
    return $tss_camera.getSecurityCameraState();
}

float isPowerEnabled()
{
    return $tss_transformer.isFrobable();
}

boolean isTSSCameraDisabled()
{
    return getTSSCameraState() == 4;
}

boolean isTSSLightsOn()
{
    return tss_lights_on == 1;
}

void triggerTSSLights()
{
    sys.trigger($tss_light1);
    sys.trigger($tss_light2);
    sys.trigger($tss_light3);

    if (isTSSLightsOn())
    {
        tss_lights_on = 0;
    }
    else
    {
        tss_lights_on = 1;
    }
}

void toggleTSSLights()
{
    if (isPowerEnabled())
    {
        triggerTSSLights();
    }
}

void disableTSSCamera()
{
    if (!isTSSCameraDisabled())
    {
        sys.trigger($tss_camera);
    }
}

void frobArcTransformer(entity arc)
{
    arc.setSkin("arc_transformer_001_off");
    arc.setFrobable(0);
    arc.startSound("snd_stop", SND_CHANNEL_UNUSED, false);

    // stop the transformer buzzing sound
    sys.trigger($transformer_speaker);

    disableTSSCamera();

    // don't trigger the lights if they are already off
    if (isTSSLightsOn())
    {
        triggerTSSLights();
    }
}

void enableTSSCamera()
{
    if (isTSSCameraDisabled() && isPowerEnabled())
    {
        sys.trigger($tss_camera);
    }
}

void move_postman()
{
    // remove the initial AI who was in the Inn
    $ai_postman.remove();

    // place him in the crypt
    sys.setSpawnArg("origin", "-927.68 -535.22 -295.853");

    // set up an 'ai_trigger_look' to trigger objective when the player looks at him
    sys.setSpawnArg("scriptobject", "ai_trigger_look");
    sys.setSpawnArg("tol_distance", "120");
    sys.setSpawnArg("tol_angle", "0.1");
    sys.setSpawnArg("once", "1");
    sys.setSpawnArg("target0", "target_change_meeting_place_objectives");

    entity newPostman = sys.spawn("atdm:postman");

    // face the sarcophogus across the aisle to make sure he's facing the right way
    newPostman.turnToEntity($func_static_2118);
}

void meeting_place_objective() {

    if (!triggered)
    {
        triggered = 1;
        sys.println("Test message.");

        // Objective to go to the 'meeting place' becomes visible
        $player1.setObjectiveVisible(5, 1);
        move_postman();
    }
    else
    {
         sys.println("already triggered, skipping...");
    }

}

void change_meeting_place_objectives()
{
    // objective to capture the perpetrator becomes visible
    $player1.setObjectiveVisible(7, 1);

    // wait a bit so these both don't happen at once
    sys.wait(3);

    // complete objective to investigate the meeting place
    $player1.setObjectiveState(5, 1);
}

void removeSafeBar(entity safeBar)
{
    entity safeDoor = safeBar.getBindMaster();
    safeBar.startSound("snd_acid", SND_CHANNEL_UNUSED, false);
    sys.wait(4);
    safeBar.remove();

    safeDoor.setFrobable(1);
}

// 'use' the safe bar.  Run in new thread so sys.wait() will work
void useSafeBar(entity safeBar)
{
    thread removeSafeBar(safeBar);
}

void frobSafeBar(entity safeBar)
{
    safeBar.startSound("snd_frob", SND_CHANNEL_UNUSED, false);
}

void swish()
{
    player player_self = $player1;
    sys.println(player_self.getMoveType());
    //sys.println(player_self.AI_CROUCH);
    //sys.println(player_self.AI_CROUCH);
    //sys.println(player_self.AI_CROUCH);
    //sys.println(player_self.AI_CROUCH);
    
    sys.trigger($speaker_swish);
    
}


// main - keep at bottom
void main()
{
    sys.waitFrame();
}







