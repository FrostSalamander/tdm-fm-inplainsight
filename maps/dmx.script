// DMX map script

/////////////
// GLOBALS
/////////////

// state of the lights in TSS office/warehouse.  1 is on, 0 is off
float tss_lights_on = 1;

// state of crypt exit door
float crypt_exit_triggered = 0;

// Gerald/Holly objective states
float gerald_journal_read = 0;
float holly_letter_read = 0;

// Bank vault safe states
float safe1_opened = 0;
float safe2_opened = 0;

////////////////
// END GLOBALS
////////////////

void checkVaultObjective(entity ent_target, entity door, entity ent_callscriptfunction)
{
    if (!$player1.getObjectiveVisible(4))
    {
        string doorName = door.getName();
        if (doorName == "bank_safedoor_1")
        {
            safe1_opened = 1;
        }
        else if (doorName == "bank_safedoor_2")
        {
            safe2_opened = 1;
        }

        if (safe1_opened && safe2_opened)
        {
            $player1.setObjectiveState(4, 1);
        }
    }
}

float getTSSCameraState() 
{
    return $tss_camera.getSecurityCameraState();
}

float isPowerEnabled()
{
    return $tss_transformer.isFrobable();
}

boolean isTSSCameraDisabled()
{
    return getTSSCameraState() == 4;
}

boolean isTSSLightsOn()
{
    return tss_lights_on == 1;
}

void triggerTSSLights()
{
    sys.trigger($tss_light1);
    sys.trigger($tss_light2);
    sys.trigger($tss_light3);
    sys.trigger($tss_outdoor_light1);
    sys.trigger($tss_outdoor_light2);

    if (isTSSLightsOn())
    {
        tss_lights_on = 0;
    }
    else
    {
        tss_lights_on = 1;
    }
}

void toggleTSSLights()
{
    if (isPowerEnabled())
    {
        triggerTSSLights();
    }
}

void disableTSSCamera()
{
    if (!isTSSCameraDisabled())
    {
        sys.trigger($tss_camera);
    }
}

void frobArcTransformer(entity arc)
{
    arc.setSkin("arc_transformer_001_off");
    arc.setFrobable(0);
    arc.startSound("snd_stop", SND_CHANNEL_UNUSED, false);

    // stop the transformer buzzing sound
    sys.trigger($transformer_speaker);

    disableTSSCamera();

    // don't trigger the lights if they are already off
    if (isTSSLightsOn())
    {
        triggerTSSLights();
    }
}

void enableTSSCamera()
{
    if (isTSSCameraDisabled() && isPowerEnabled())
    {
        sys.trigger($tss_camera);
    }
}

void move_postman()
{
    // remove the initial AI who was in the Inn
    $ai_postman.remove();

    // place him in the crypt
    sys.setSpawnArg("origin", "-935.679 -535.221 -295.853");

    // set up an 'ai_trigger_look' to trigger objective when the player looks at him
    sys.setSpawnArg("scriptobject", "ai_trigger_look");
    sys.setSpawnArg("tol_distance", "200");

    // tol_angle should be 0.1, but doesn't work: https://wiki.thedarkmod.com/index.php?title=Triggering_events_when_looking_at_something#Remarks
    sys.setSpawnArg("tol_angle", "2"); 
    sys.setSpawnArg("once", "1");
    sys.setSpawnArg("target0", "target_change_meeting_place_objectives");

    entity newPostman = sys.spawn("atdm:postman");

    // make him face south
    newPostman.setAngles('0 -90 0');

    // we don't want the player to discover the secret exit before now
    $crypt_torch_lever.setFrobable(1);
}

void change_meeting_place_objectives()
{
    // DEBUG: remove
    sys.println("ai_trigger_look triggered.");

    // objective to capture the perpetrator becomes visible
    $player1.setObjectiveVisible(7, 1);

    // wait a bit so these both don't happen at once
    sys.wait(3);

    // complete objective to find out who is behind the plot
    $player1.setObjectiveState(5, 1);
}

void removeSafeBar(entity safeBar)
{
    entity safeDoor = safeBar.getBindMaster();
    safeBar.startSound("snd_acid", SND_CHANNEL_UNUSED, false);
    sys.wait(4);
    safeBar.remove();

    safeDoor.setFrobable(1);
}

// 'use' the safe bar.  Run in new thread so sys.wait() will work
void useSafeBar(entity safeBar)
{
    thread removeSafeBar(safeBar);
}

void frobSafeBar(entity safeBar)
{
    safeBar.startSound("snd_frob", SND_CHANNEL_UNUSED, false);
}

void swish()
{
    player player_self = $player1;
    sys.println(player_self.getMoveType());
    
    sys.trigger($speaker_swish);
    
}

boolean isPostmanShouldered()
{
    entity body = $player1.getShouldered();
    string name = body.getName();
    sys.println("name: " + name);

    return (name == "ai_postman");
}

void complete_mission()
{
    if ($player1.getObjectiveVisible(7) && isPostmanShouldered())
    {
        $player1.setObjectiveState(7, OBJ_COMPLETE);
    }
}

// used with a trigger_facing. If facing the statue and crouched, trigger the exit door.
// track state because we can't use a trigger once
void trigger_crypt_exit()
{
    player player_self = $player1;
    if (player_self.AI_CROUCH && !crypt_exit_triggered)
    {
        sys.trigger($crypt_secret_exit_door);
        crypt_exit_triggered = 1;
    }
}

// If the Gerald/Holly objective isn't yet visible and you've
// read both their readables, make the objective visible
void geraldHollyObjective(entity ent_target, entity readable, entity ent_callscriptfunction)
{
    if (!$player1.getObjectiveVisible(8))
    {
        string readableName = readable.getName();
        if (readableName == "holly_letter")
        {
            holly_letter_read = 1;
        }
        else if (readableName == "gerald_journal")
        {
            gerald_journal_read = 1;
        }

        if (holly_letter_read && gerald_journal_read)
        {
            $player1.setObjectiveVisible(8, 1);
        }
    }
}

// main - keep at bottom
void main()
{
    sys.waitFrame();
}









